package tvshowrecordkeeper;

import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionAdapter;
import java.util.ArrayList;
import javax.swing.ImageIcon;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Saketh
 */
public class ShowList extends javax.swing.JFrame {

    TVShow selectedShow;
    ArrayList<TVShow> tvShowList;
    EpisodeList el;

    /**
     * Creates new form TVShowViewer
     *
     * @param showList = {"LOL", "POL", "MOL"}
     */
    public ShowList(ArrayList<TVShow> showList) {
        initComponents();
        repaint();
        
        this.tvShowList = showList;
        this.getRootPane().setDefaultButton(btnShowEpisodes);

        ListSelectionListener ll = (ListSelectionEvent e) -> {
            int index = ((JList) e.getSource()).getSelectedIndex();
            if (!tvShowList.isEmpty()) {
                selectedShow = (TVShow) ((JList) e.getSource()).getModel().getElementAt(index);
            }
        };

        MouseAdapter ma = new MouseAdapter() {

            @Override
            public void mouseClicked(MouseEvent e) {
                super.mouseClicked(e);
                if (e.getClickCount() == 2) {
                    setupShowEpisodes();
                }
            }

        };
        jListShows.setModel(new javax.swing.AbstractListModel() {
            ArrayList<TVShow> strings = tvShowList;

            @Override
            public int getSize() {
                return strings.size();
            }

            @Override
            public Object getElementAt(int i) {
                return strings.get(i);
            }
        });

        jListShows.addListSelectionListener(ll);
        jListShows.addMouseListener(ma);

        jListShows.addMouseMotionListener(
                new MouseMotionAdapter() {

                    @Override
                    public void mouseDragged(MouseEvent e) {
                        super.mouseDragged(e); //To change body of generated methods, choose Tools | Templates.
                    }

                }
        );

        jListShows.setSize(this.getSize());

        this.setDefaultCloseOperation(3);
        this.setLocation(180, 150);
    }

    private void showEpisodes() {
        if (!tvShowList.isEmpty()) {
            System.out.println(selectedShow.getLastWatchedEpisode());
            el = new EpisodeList(selectedShow);
            this.setVisible(false);
            el.setVisible(true);
            el.setDefaultCloseOperation(3);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jListShows = new javax.swing.JList();
        btnAddNew = new javax.swing.JButton();
        btnShowEpisodes = new javax.swing.JButton();
        btnRemoveShow = new javax.swing.JButton();
        btnReorderUp = new javax.swing.JButton();
        btnReorderDown = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(0, 0, 0));
        setResizable(false);

        jLabel1.setText("TV Shows");

        jListShows.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(jListShows);

        btnAddNew.setText("Add New Show");
        btnAddNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddNewActionPerformed(evt);
            }
        });

        btnShowEpisodes.setText("Show Episodes");
        btnShowEpisodes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowEpisodesActionPerformed(evt);
            }
        });

        btnRemoveShow.setText("Remove Show");
        btnRemoveShow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveShowActionPerformed(evt);
            }
        });

        btnReorderUp.setText("Up");
        btnReorderUp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReorderUpActionPerformed(evt);
            }
        });

        btnReorderDown.setText("Down");
        btnReorderDown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReorderDownActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnAddNew)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnShowEpisodes)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnRemoveShow)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 415, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(btnReorderUp, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnReorderDown, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnShowEpisodes)
                            .addComponent(btnRemoveShow)
                            .addComponent(btnAddNew)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(70, 70, 70)
                        .addComponent(btnReorderUp, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnReorderDown, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(5, 5, 5))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddNewActionPerformed
        String newShowName = JOptionPane.showInputDialog("Name of the Show");
        if (!newShowName.equals("")) {
            String newShowPath = JOptionPane.showInputDialog("Path");
            TVShowRecordKeeper.addTVShow(newShowName, newShowPath);
            jListShows.updateUI();
        } else {
            JOptionPane.showMessageDialog(rootPane, "Pls provide a name");
        }
    }//GEN-LAST:event_btnAddNewActionPerformed

    private void btnShowEpisodesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowEpisodesActionPerformed
        setupShowEpisodes();
    }//GEN-LAST:event_btnShowEpisodesActionPerformed

    @Override
    public void setVisible(boolean b) {
        super.setVisible(b);
        this.setLocation(TVShowRecordKeeper.defaultLocX, TVShowRecordKeeper.defaultLocY);
    }

    private void setupShowEpisodes() {
        if (selectedShow != null) {
            TVShowRecordKeeper.defaultLocX = this.getX();
            TVShowRecordKeeper.defaultLocY = this.getY();
            showEpisodes();
        } else {
            JOptionPane.showMessageDialog(rootPane, "Nothing selected");
        }
    }
    private void btnRemoveShowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveShowActionPerformed
        if (selectedShow != null) {
            int yes = JOptionPane.showConfirmDialog(rootPane, "Do you really want to?", "Really delete?", JOptionPane.YES_NO_OPTION);
            if (yes == 0) {
                int ind = tvShowList.indexOf(selectedShow);
                tvShowList.remove(selectedShow);
                TVShowRecordKeeper.updateShowFile();
                jListShows.repaint();
                JOptionPane.showMessageDialog(rootPane, selectedShow + " deleted from the list");
            } else {
                JOptionPane.showMessageDialog(rootPane, "Not Deleted");
            }
        } else {
            JOptionPane.showMessageDialog(rootPane, "Select a Show");
        }
    }//GEN-LAST:event_btnRemoveShowActionPerformed

    private void btnReorderUpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReorderUpActionPerformed
        int selectedIndex = jListShows.getSelectedIndex();
        if(selectedIndex != 0){
            TVShow get = tvShowList.get(selectedIndex);
            tvShowList.remove(selectedIndex);
            tvShowList.add(selectedIndex-1, get);
            jListShows.setSelectedIndex(selectedIndex-1);
            TVShowRecordKeeper.updateShowFile();
            jListShows.updateUI();
        }
        jListShows.requestFocus();
    }//GEN-LAST:event_btnReorderUpActionPerformed

    private void btnReorderDownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReorderDownActionPerformed
        int selectedIndex = jListShows.getSelectedIndex();
        if(selectedIndex != tvShowList.size()-1){
            TVShow get = tvShowList.get(selectedIndex);
            tvShowList.remove(selectedIndex);
            tvShowList.add(selectedIndex+1, get);
            jListShows.setSelectedIndex(selectedIndex+1);
            TVShowRecordKeeper.updateShowFile();
            jListShows.updateUI();
        }
        jListShows.requestFocus();
    }//GEN-LAST:event_btnReorderDownActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddNew;
    private javax.swing.JButton btnRemoveShow;
    private javax.swing.JButton btnReorderDown;
    private javax.swing.JButton btnReorderUp;
    private javax.swing.JButton btnShowEpisodes;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JList jListShows;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
